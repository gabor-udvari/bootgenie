<?php

    namespace thebuggenie\modules\bootgenie;

    use thebuggenie\core\framework;

    /**
     * Autogenerated module Bootgenie
     *
     * @author
     * @version 0.1
     * @license http://opensource.org/licenses/MPL-2.0 Mozilla Public License 2.0 (MPL 2.0)
     * @package bootgenie
     * @subpackage core
     */

    /**
     * Autogenerated module Bootgenie
     *
     * @package bootgenie
     * @subpackage core
		 *
     * @Table(name="\thebuggenie\core\entities\tables\Modules")
     */
    class Bootgenie extends \thebuggenie\core\entities\Module
    {

        const VERSION = '0.1';

        protected $_longname = 'Bootgenie';
        protected $_description = 'Bootgenie description here';
        protected $_module_config_title = 'Bootgenie';
        protected $_module_config_description = 'Set up the Bootgenie module from this section';

        protected $_enabled = false;

        /**
         * Return an instance of this module
         *
         * @return Bootgenie
         */
        public static function getModule()
        {
            return framework\Context::getModule('bootgenie');
        }

        protected function _initialize()
        {
            define('BOOTGENIE_PATH', THEBUGGENIE_PATH . 'modules/bootgenie/');
        }

        protected function _addListeners()
        {
            if (true) {
                // listen for renderTemplate (overwrite module action templates)
                framework\Event::listen('core', 'self::performAction::renderTemplate', array($this, 'listen_renderTemplate'));
                // listen for renderBegins (overwrite layout and components)
                framework\Event::listen('core', '\thebuggenie\core\framework\Context::renderBegins', array($this, 'listen_renderBegins'));
            }
        }

        protected function _install($scope)
        {
        }

        protected function _loadFixtures($scope)
        {
        }

        protected function _uninstall()
        {
        }

        public function listen_renderTemplate(framework\Event $event)
        {
            framework\Context::getResponse()->setTemplate('bootgenie/main_index');
            $event->setProcessed();                                                                                       
            // $event->setReturnValue(''); // not needed
        }

        public function listen_renderBegins(framework\Event $event)
        {
            // Set core layout path
            framework\Context::getResponse()->setLayoutPath(BOOTGENIE_PATH . 'templates');
            // set override map
            framework\Context::getRouting()->setComponentOverrideMap(['publish/menustriplinks'=>['module'=>'bootgenie', 'method'=>'publish_menustriplinks']]);
        }

    }
